{% if data is not empty %}
<div class="widget-outer" style="
  display: flex;
  place-content: center;
  width: 100%;">
		<div class="widget-inner" style="
		height: 100%;
		width:100%;
		display:flex;
		align-content: center;
		align-items: center;
		align-self: center;">
			<div style="
			width:100%;
			background: rgb(255, 255, 255) none repeat scroll 0% 0%;
			box-shadow: rgba(100, 100, 100, 0.5) 0px 6px 20px;
			padding: 0;
			text-align: left;
			display: flex;
			align-content: center;
			align-items: center;
			flex-wrap: wrap;
			justify-content: center;">
				<iframe src="https://plugin.keepoala.com/checkoutbanner/index.html?email={{ email }}&shop={{ shopname }}&order_id={{ orderID }}&lang={{ lang }}" id="keepoala_inner" style="border:0" ></iframe>
				
		</div>
	</div>

<script2>
(function(funcName, baseObj) {
    // The public function name defaults to window.docReady
    // but you can pass in your own object and own function name and those will be used\
    // if you want to put them in a different namespace\
    funcName = funcName || "docReady";
    baseObj = baseObj || window;
    var readyList = [];
    var readyFired = false;
    var readyEventHandlersInstalled = false;
    
    // call this when the document is ready\
    // this function protects itself against being called more than once\
    function ready() {
        if (!readyFired) {
            // this must be set to true before we start calling callbacks\
            readyFired = true;
            for (var i = 0; i < readyList.length; i++) {
                // if a callback here happens to add new ready handlers,\
                // the docReady() function will see that it already fired\
                // and will schedule the callback to run right after\
                // this event loop finishes so all handlers will still execute\
                // in order and no new ones will be added to the readyList\
                // while we are processing the list\
                readyList[i].fn.call(window, readyList[i].ctx);
            }
            // allow any closures held by these functions to free\
            readyList = [];
        }
    }
    
    function readyStateChange() {
        if ( document.readyState === "complete" ) {
            ready();
        }
    }
    
    // This is the one public interface\
    // docReady(fn, context);\
    // the context argument is optional - if present, it will be passed\
    // as an argument to the callback\
    baseObj[funcName] = function(callback, context) {
        if (typeof callback !== "function") {
            throw new TypeError("callback for docReady(fn) must be a function");
        }
        // if ready has already fired, then just schedule the callback\
        // to fire asynchronously, but right away\
        if (readyFired) {
            setTimeout(function() {callback(context);}, 1);
            return;
        } else {
            // add the function and context to the list\
            readyList.push({fn: callback, ctx: context});
        }
        // if document already ready to go, schedule the ready function to run\
        if (document.readyState === "complete") {
            setTimeout(ready, 1);
        } else if (!readyEventHandlersInstalled) {
            // otherwise if we dont have event handlers installed, install them\
            if (document.addEventListener) {
                // first choice is DOMContentLoaded event\
                document.addEventListener("DOMContentLoaded", ready, false);
                // backup is window load event\
                window.addEventListener("load", ready, false);
            } else {
                // must be IE\
                document.attachEvent("onreadystatechange", readyStateChange);
                window.attachEvent("onload", ready);
            }
            readyEventHandlersInstalled = true;
        }
    }
})("docReady", window);

function insertAfter(newNode, referenceNode) {
    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
}
console.log("TEST TEST TEST")
// prevent the function docReady from running multiple times
localStorage.setItem("ran", false)

docReady(function() {

    // Inject Keepoala CSS if not there
    if (!document.getElementById('keepoala-css')) {
        var link = document.createElement('link');
        link.id = 'keepoala-css';
        link.rel = 'stylesheet';
        link.href = '{{ plugin_path("KeepoalaWidget2") }}/css/keepoala.css';
        document.head.appendChild(link);
    }

})
</script2>
</div>
{% endif %}